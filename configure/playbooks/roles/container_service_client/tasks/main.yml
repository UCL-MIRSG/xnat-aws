---
- name: Ensure docker cert dir exists on client
  ansible.builtin.file:
    path: "{{ docker_client.cert_dir }}"
    state: directory
    owner: "{{ docker_client.owner }}"
    group: "{{ docker_client.group }}"
    mode: 0700

- name: Copy docker server certificate to client
  ansible.builtin.copy:
    src: "{{ xnat_container_service_temp_files_cert_dir }}/ca.pem"
    dest: "{{ docker_client.server_ca_cert_file }}"
    owner: "{{ docker_client.owner }}"
    group: "{{ docker_client.group }}"
    mode: 0600

- name: Copy signed docker client certificate to client
  ansible.builtin.copy:
    src: "{{ xnat_container_service_temp_files_cert_dir }}/{{ xnat_web_server.host }}.cert"
    dest: "{{ docker_client.ssl_cert_file }}"
    owner: "{{ docker_client.owner }}"
    group: "{{ docker_client.group }}"
    mode: 0600

- name: Copy private key to client
  ansible.builtin.copy:
    src: "{{ xnat_container_service_temp_files_cert_dir }}/key.pem"
    dest: "{{ docker_client.ssl_key_file }}"
    owner: "{{ docker_client.owner }}"
    group: "{{ docker_client.group }}"
    mode: 0600

- name: "Configure XNAT to talk to container service"
  ansible.builtin.uri:
    url: "{{ xnat_web_server.url }}/xapi/docker/server"
    user: "{{ xnat_service_admin.username }}"
    password: "{{ xnat_service_admin.password }}"
    method: POST
    body_format: json
    body:
      name: "{{ xnat_container_service.name }}"
      host: "https://{{ xnat_container_service.host }}:{{ xnat_container_service.port }}"
      cert-path: "{{ docker_client.cert_dir }}"
      swarm-mode: false
      path-translation-xnat-prefix: "{{ xnat_root_dir }}"
      path-translation-docker-prefix: "{{ container_service_remote_xnat_root }}"
      pull-images-on-xnat-init: false
      container-user: ""
    validate_certs: "{{ ssl.validate_certs }}"
    status_code: 200, 201

# Return 201 if added, 400 if already exists
- name: Add images to Container Service
  ansible.builtin.uri:
    url: "{{ xnat_web_server.url }}/xapi/commands"
    user: "{{ xnat_service_admin.username }}"
    password: "{{ xnat_service_admin.password }}"
    method: POST
    body: "{{ lookup('file', command_file) }}"
    body_format: json
    validate_certs: "{{ ssl.validate_certs }}"
    status_code: [201, 400]
  register: xnat_commands_added
  changed_when: xnat_commands_added.status == 201
  loop_control:
    loop_var: "command_file"
  with_fileglob:
    - "files/*-command.json"
