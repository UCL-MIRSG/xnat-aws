---
- name: Ensure unzip is installed
  ansible.builtin.yum:
    name: "unzip"
    state: installed

- name: "Ensure download directories exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ xnat.owner }}"
    group: "{{ xnat.group }}"
    mode: 0755
  with_items:
    - "{{ xnat_source.plugins_downloads_dir }}/"

- name: Download XNAT plugins
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ xnat_source.plugins_downloads_dir }}"
    timeout: 30
    owner: "{{ xnat.owner }}"
    group: "{{ xnat.group }}"
    mode: 0644
  register: plugins_downloaded
  with_items:
    - "{{ xnat_plugin_urls }}"
    - "{{ xnat_server_specific_plugin_urls | default([]) }}"

- name: Get current plugins from remote file cache
  ansible.builtin.find:
    paths: "{{ xnat_source.plugins_downloads_dir }}"
    patterns: "*.jar"
  register: cached_plugins

- name: Removing old plugins from local file cache
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ cached_plugins.files }}"
  when:
    - item.path | basename not in plugins_downloaded.results | map(attribute='dest')|map('basename')|list
    - item.path | basename not in package_plugins_downloaded.results | map(attribute='dest')|map('basename')|list

- name: "Get list of plugins on the local cache"
  ansible.builtin.find:
    paths: "{{ xnat_source.plugins_downloads_dir }}"
    patterns: "*.jar"
    file_type: file
  register: local_plugin_list

- name: "Get stats for local plugins"
  ansible.builtin.stat:
    path: "{{ item.path }}"
  with_items: "{{ local_plugin_list.files }}"
  register: local_plugins_stats

- name: "Get list of hashes for local plugins"
  vars:
    local_stats: []
  ansible.builtin.set_fact:
    local_stats: "{{ local_stats + [{'name': item.stat.path | basename, 'hash': item.stat.checksum}] }}"
  with_items: "{{ local_plugins_stats.results }}"

- name: "Ensure directories exist for install files"
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ xnat.owner }}"
    group: "{{ xnat.group }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ xnat.install_downloads }}"

- name: "Get list of plugins on the remote server"
  ansible.builtin.find:
    paths: "{{ xnat_plugins_dir }}"
    patterns: "*.jar"
    file_type: file
  register: remote_plugin_list

- name: "Get stats for remote plugins"
  ansible.builtin.stat:
    path: "{{ item.path }}"
  with_items: "{{ remote_plugin_list.files }}"
  register: remote_plugins_stats

- name: "Get list of hashes for remote plugins"
  ansible.builtin.set_fact:
    remote_stats: "{{ remote_stats | default([]) + [{'name': item.stat.path | basename, 'hash': item.stat.checksum}] }}"
  with_items: "{{ remote_plugins_stats.results }}"

- name: "Check if any plugins have changed"
  ansible.builtin.set_fact:
    plugin_changes: "{{ remote_stats | default([]) | symmetric_difference(local_stats) }}"

- name: "Ensure tomcat is not running when plugins are being updated"
  ansible.builtin.service:
    name: tomcat
    state: stopped
  when: plugin_changes | length > 0

- name: "Copy XNAT plugins from {{ xnat_source.plugins_downloads_dir }} to {{ xnat_plugins_dir }}"
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ xnat_plugins_dir }}"
    owner: "{{ tomcat.owner }}"
    group: "{{ tomcat.group }}"
    mode: 0600
    remote_src: true
  with_items:
    - "{{ local_plugin_list.files }}"
  register: plugins_files
  when: plugin_changes | length > 0

- name: Removing old plugins from server
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ remote_plugin_list.files }}"
  when:
    - "item.path | basename not in local_plugin_list.files | map(attribute='path') | map('basename') | list"
    - "plugin_changes | length > 0"
